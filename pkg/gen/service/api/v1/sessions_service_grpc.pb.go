// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package apiv1

import (
	context "context"
	v1 "github.com/v8platform/protos/gen/ras/messages/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SessionsServiceClient is the client API for SessionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SessionsServiceClient interface {
	GetSessions(ctx context.Context, in *v1.GetSessionsRequest, opts ...grpc.CallOption) (*v1.GetSessionsResponse, error)
	// GetInfobaseSessionsRequest
	GetInfobaseSessions(ctx context.Context, in *v1.GetInfobaseSessionsRequest, opts ...grpc.CallOption) (*v1.GetInfobaseSessionsResponse, error)
}

type sessionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionsServiceClient(cc grpc.ClientConnInterface) SessionsServiceClient {
	return &sessionsServiceClient{cc}
}

func (c *sessionsServiceClient) GetSessions(ctx context.Context, in *v1.GetSessionsRequest, opts ...grpc.CallOption) (*v1.GetSessionsResponse, error) {
	out := new(v1.GetSessionsResponse)
	err := c.cc.Invoke(ctx, "/service.api.v1.SessionsService/GetSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionsServiceClient) GetInfobaseSessions(ctx context.Context, in *v1.GetInfobaseSessionsRequest, opts ...grpc.CallOption) (*v1.GetInfobaseSessionsResponse, error) {
	out := new(v1.GetInfobaseSessionsResponse)
	err := c.cc.Invoke(ctx, "/service.api.v1.SessionsService/GetInfobaseSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionsServiceServer is the server API for SessionsService service.
// All implementations must embed UnimplementedSessionsServiceServer
// for forward compatibility
type SessionsServiceServer interface {
	GetSessions(context.Context, *v1.GetSessionsRequest) (*v1.GetSessionsResponse, error)
	// GetInfobaseSessionsRequest
	GetInfobaseSessions(context.Context, *v1.GetInfobaseSessionsRequest) (*v1.GetInfobaseSessionsResponse, error)
	mustEmbedUnimplementedSessionsServiceServer()
}

// UnimplementedSessionsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSessionsServiceServer struct {
}

func (UnimplementedSessionsServiceServer) GetSessions(context.Context, *v1.GetSessionsRequest) (*v1.GetSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessions not implemented")
}
func (UnimplementedSessionsServiceServer) GetInfobaseSessions(context.Context, *v1.GetInfobaseSessionsRequest) (*v1.GetInfobaseSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfobaseSessions not implemented")
}
func (UnimplementedSessionsServiceServer) mustEmbedUnimplementedSessionsServiceServer() {}

// UnsafeSessionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionsServiceServer will
// result in compilation errors.
type UnsafeSessionsServiceServer interface {
	mustEmbedUnimplementedSessionsServiceServer()
}

func RegisterSessionsServiceServer(s grpc.ServiceRegistrar, srv SessionsServiceServer) {
	s.RegisterService(&SessionsService_ServiceDesc, srv)
}

func _SessionsService_GetSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionsServiceServer).GetSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.api.v1.SessionsService/GetSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionsServiceServer).GetSessions(ctx, req.(*v1.GetSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionsService_GetInfobaseSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetInfobaseSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionsServiceServer).GetInfobaseSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.api.v1.SessionsService/GetInfobaseSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionsServiceServer).GetInfobaseSessions(ctx, req.(*v1.GetInfobaseSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SessionsService_ServiceDesc is the grpc.ServiceDesc for SessionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SessionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.api.v1.SessionsService",
	HandlerType: (*SessionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSessions",
			Handler:    _SessionsService_GetSessions_Handler,
		},
		{
			MethodName: "GetInfobaseSessions",
			Handler:    _SessionsService_GetInfobaseSessions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/api/v1/sessions_service.proto",
}
